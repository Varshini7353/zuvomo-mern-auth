const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const passport = require('passport');
const validator = require('validator');
const crypto = require('crypto');

const User = require('../models/User');
const { sendMail } = require('../utils/mailer');

const JWT_SECRET = process.env.JWT_SECRET;
const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:3000';

function signToken(user) {
  return jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, { expiresIn: process.env.JWT_EXPIRES_IN || '7d' });
}

// register
router.post('/signup', async (req, res) => {
  try {
    const { fullName, email, password, phone, country, state, city, dob, interests, profileImage } = req.body;

    if (!fullName || !email || !password) return res.status(400).json({ msg: 'Name, email and password required' });
    if (!validator.isEmail(email)) return res.status(400).json({ msg: 'Invalid email' });
    if (password.length < 6) return res.status(400).json({ msg: 'Password too short' });

    let user = await User.findOne({ email: email.toLowerCase() });
    if (user) return res.status(400).json({ msg: 'User already exists' });

    const salt = await bcrypt.genSalt(10);
    const hashed = await bcrypt.hash(password, salt);

    user = new User({
      fullName, email: email.toLowerCase(), password: hashed,
      phone, country, state, city, dob, interests, profileImage
    });
    await user.save();
    const token = signToken(user);
    res.json({ token, user: { id: user._id, fullName: user.fullName, email: user.email } });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'Server error' });
  }
});

// login
router.post('/login', async (req, res) => {
  try {
    const { identifier, password } = req.body; // identifier can be email or phone
    if (!identifier || !password) return res.status(400).json({ msg: 'Missing credentials' });

    const user = await User.findOne({ $or: [{ email: identifier.toLowerCase() }, { phone: identifier }] });
    if (!user || !user.password) return res.status(400).json({ msg: 'Invalid credentials' });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(400).json({ msg: 'Invalid credentials' });

    const token = signToken(user);
    res.json({ token, user: { id: user._id, fullName: user.fullName, email: user.email } });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'Server error' });
  }
});

// protected route sample
router.get('/me', async (req, res) => {
  try {
    const auth = req.headers.authorization;
    if (!auth) return res.status(401).json({ msg: 'No token' });
    const token = auth.split(' ')[1];
    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await User.findById(decoded.id).select('-password -otp');
    if (!user) return res.status(404).json({ msg: 'User not found' });
    res.json({ user });
  } catch (err) {
    return res.status(401).json({ msg: 'Unauthorized' });
  }
});

// forgot password - send OTP
router.post('/forgot', async (req, res) => {
  try {
    const { email } = req.body;
    if (!email || !validator.isEmail(email)) return res.status(400).json({ msg: 'Valid email required' });

    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) return res.status(404).json({ msg: 'No user with that email' });

    // generate OTP
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes
    user.otp = { code, expiresAt };
    await user.save();

    // send email with OTP
    const subject = 'Password reset OTP';
    const text = Your OTP code is ${code}. It is valid for 10 minutes.;
    await sendMail(user.email, subject, text, <p>${text}</p>);

    res.json({ msg: 'OTP sent to email' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'Server error' });
  }
});

// verify OTP + reset
router.post('/reset', async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;
    if (!email || !otp || !newPassword) return res.status(400).json({ msg: 'Missing fields' });

    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user || !user.otp || user.otp.code !== otp) return res.status(400).json({ msg: 'Invalid OTP' });
    if (new Date() > new Date(user.otp.expiresAt)) return res.status(400).json({ msg: 'OTP expired' });

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    user.otp = undefined;
    await user.save();
    res.json({ msg: 'Password reset successful' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'Server error' });
  }
});

// change password (logged in)
router.post('/change-password', async (req, res) => {
  try {
    const auth = req.headers.authorization;
    if (!auth) return res.status(401).json({ msg: 'No token' });
    const token = auth.split(' ')[1];
    const decoded = jwt.verify(token, JWT_SECRET);

    const { currentPassword, newPassword } = req.body;
    if (!currentPassword || !newPassword) return res.status(400).json({ msg: 'Missing fields' });

    const user = await User.findById(decoded.id);
    if (!user) return res.status(404).json({ msg: 'User not found' });

    const match = await bcrypt.compare(currentPassword, user.password);
    if (!match) return res.status(400).json({ msg: 'Current password incorrect' });

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();
    res.json({ msg: 'Password changed' });
  } catch (err) {
    console.error(err);
    return res.status(401).json({ msg: 'Unauthorized' });
  }
});

/* Social Auth routes (Google & LinkedIn) */

// Google
router.get('/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

router.get('/google/callback', passport.authenticate('google', { session: false, failureRedirect: '/api/auth/google/failure' }),
  (req, res) => {
    // on success, sign token and redirect to frontend with token
    const token = signToken(req.user);
    res.redirect(${FRONTEND_URL}/social-success?token=${token});
  }
);

router.get('/google/failure', (req, res) => res.status(401).json({ msg: 'Google auth failed' }));

// LinkedIn
router.get('/linkedin', passport.authenticate('linkedin'));

router.get('/linkedin/callback', passport.authenticate('linkedin', { session: false, failureRedirect: '/api/auth/linkedin/failure' }),
  (req, res) => {
    const token = signToken(req.user);
    res.redirect(${FRONTEND_URL}/social-success?token=${token});
  }
);

router.get('/linkedin/failure', (req, res) => res.status(401).json({ msg: 'LinkedIn auth failed' }));

module.exports = router;